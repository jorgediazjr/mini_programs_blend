#!/usr/bin/python

import os, fnmatch, collections, argparse, random
import subprocess
from random import sample

def find_files(root_path, pattern):
    '''
    this function finds the locations
    of the files with the specified
    pattern

    Parameters
    ----------
    pattern: str
        the pattern for the filename
    path: str
        the home or root path of use

    Returns
    -------
    list
        list of paths to CLUSTERS.txt
    '''
    f = []
    for root, dirs, files in os.walk(root_path):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                f.append(os.path.join(root, name))
    return f


def file_lens(files):
    lens = {}
    for file in files:
        p = subprocess.Popen(['wc', '-l', file],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
        result, error = p.communicate()
        if p.returncode == 0:
            num_of_clusters = int(result.strip().split()[0]) - 4
            lens[file] = num_of_clusters
    return lens


def read_header(files):
    '''
    this function just reads the
    header for CLUSTERS.txt

    Returns
    -------
    list
        list with all the header info 
    '''
    header = []
    for file in files:
        f = open(file, 'r').readlines()
        header.append(f[0])
        header.append(f[1])
        header.append(f[2])
        break
    return headers


def generate_random_cluster_sets(lengths, mini=10, maxi=12, num_of_clusters=20):
    random_clusters = {}
    for path in lengths:
        num_lines = lengths[path]
        for i in range(num_of_clusters):
            random_clusters[i+1] = random.sample(range(1,num_lines), random.randint(mini, maxi+1))
    return random_clusters 


def add_parser():
    parser = argparse.ArgumentParser(description="Program accepts short and tall height of cluster for extraction of promising clusters")
    parser.add_argument("-m", "--minimum", help="enter the minimum amount of datasets you want per cluster",
                        type=int, default=10)
    parser.add_argument("-x", "--maximum", help="enter the maximum number of datasets you want per cluster",
                        type=int, default=16)
    parser.add_argument("-r", "--random_clusters", help="number of random cluster user desires",
                        type=int, default=10)
    args = parser.parse_args()
    return args


def write_random_clusters_to_file(random_clusters):
    header = "Cluster DatasetIDs"
    with open("RANDOM_CLUSTERS.txt", 'w') as file:
        file.write("{}\n".format(header))
        for cluster in random_clusters:
            file.write("{}\t{}\n".format(cluster, ' '.join(list(map(str, random_clusters[cluster])))))


home_path = os.getcwd()
cluster_files = find_files(home_path, 'CLUSTERS.txt')
cluster_files.sort()

args = add_parser()
mini = args.minimum
maxi = args.maximum
num_clusters = args.random_clusters
lengths = file_lens(cluster_files)

# old version
# random_clusters = generate_random_cluster_sets(len, mini, maxi, num_clusters)

def get_random_clusters(lengths, num_of_clusters, cluster_files):
    path_cluster = {}
    temp_clusters = []
    for cluster_file in cluster_files:
        print(lengths)
        rng = [i for i in range(1, lengths[cluster_file] + 1)]
        print(rng)
        exit()
        rand_sample = sample(rng, num_clusters)
        print("Rand sample = {}\nType = {}".format(rand_sample, type(rand_sample)))
        os.chdir(os.path.dirname(cluster_file))
        with open(cluster_file, 'r') as f:
            for line in f:
                try:
                    if type(int(float(line.split()[0]+'.'))) == type(0):
                        cluster = int(float(line.split()[0]+'.'))
                        if cluster in rand_sample:
                            temp_clusters.append(line)
                except:
                    pass
        path_cluster[cluster_file] = temp_clusters
        temp_clusters = []
    return path_cluster


# new version
random_clusters = get_random_clusters(lengths, num_clusters, cluster_files)
print(random_clusters)
# write_random_clusters_to_file(random_clusters)
